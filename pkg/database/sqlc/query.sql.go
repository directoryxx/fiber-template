// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: query.sql

package sqlc

import (
	"context"
)

const countRoleAll = `-- name: CountRoleAll :one
SELECT COUNT(*)::integer FROM roles
`

func (q *Queries) CountRoleAll(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, countRoleAll)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const countRoleByID = `-- name: CountRoleByID :one
SELECT COUNT(*)::integer FROM roles
WHERE id = $1
`

func (q *Queries) CountRoleByID(ctx context.Context, id int32) (int32, error) {
	row := q.db.QueryRow(ctx, countRoleByID, id)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const createRole = `-- name: CreateRole :one
INSERT INTO roles (
    name
) VALUES (
             $1
         )
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateRole(ctx context.Context, name string) (Role, error) {
	row := q.db.QueryRow(ctx, createRole, name)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRole = `-- name: DeleteRole :exec
DELETE FROM roles
WHERE id = $1
`

func (q *Queries) DeleteRole(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteRole, id)
	return err
}

const getRole = `-- name: GetRole :one
SELECT id, name, created_at, updated_at FROM roles
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetRole(ctx context.Context, id int32) (Role, error) {
	row := q.db.QueryRow(ctx, getRole, id)
	var i Role
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRoles = `-- name: ListRoles :many
SELECT id, name, created_at, updated_at FROM roles
ORDER BY name
`

func (q *Queries) ListRoles(ctx context.Context) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRoles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRolesPagination = `-- name: ListRolesPagination :many
SELECT id, name, created_at, updated_at FROM roles
ORDER BY name LIMIT $1 OFFSET $2
`

type ListRolesPaginationParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListRolesPagination(ctx context.Context, arg ListRolesPaginationParams) ([]Role, error) {
	rows, err := q.db.Query(ctx, listRolesPagination, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Role
	for rows.Next() {
		var i Role
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
